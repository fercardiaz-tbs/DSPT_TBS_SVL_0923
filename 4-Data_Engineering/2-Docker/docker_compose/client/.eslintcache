[{"/usr/app/src/index.js":"1","/usr/app/src/App.js":"2"},{"size":504,"mtime":1641808665620,"results":"3","hashOfConfig":"4"},{"size":952,"mtime":1641808665620,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8m2fx9",{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/usr/app/src/index.js",[],"/usr/app/src/App.js",["10","11"],{"ruleId":"12","severity":1,"message":"13","line":9,"column":3,"nodeType":"14","endLine":9,"endColumn":12,"suggestions":"15"},{"ruleId":"12","severity":1,"message":"16","line":9,"column":13,"nodeType":"17","endLine":13,"endColumn":4},"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setData'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.","Identifier",["18"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression",{"desc":"19","fix":"20"},"Add dependencies array: []",{"range":"21","text":"22"},[299,299],", []"]